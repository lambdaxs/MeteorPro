{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/server_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js","meteor://ðŸ’»app/packages/accounts-base/accounts_rate_limit.js","meteor://ðŸ’»app/packages/accounts-base/accounts_server.js","meteor://ðŸ’»app/packages/accounts-base/url_server.js"],"names":["AccountsServer","Accounts","Meteor","server","users","AccountsCommon","options","_options","connection","undefined","_initConnection","Mongo","Collection","_preventAutopublish","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","userId","Error","user","findOne","config","self","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","_","has","isClient","Package","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","each","keys","key","contains","onLogin","func","register","onLoginFailure","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","DEFAULT_LOGIN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","Ap","prototype","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","defaultRateLimiterRuleId","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","addDefaultRateLimit","addRule","clientAddress","type","connectionId","crypto","Npm","require","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","currentInvocation","_CurrentInvocation","get","validateLoginAttempt","validateNewUser","push","onCreateUser","_onCreateUserHook","cloneAttemptWithConnection","attempt","clonedAttempt","EJSON","clone","_validateLogin","callback","ret","e","allowed","error","_successfulLogin","_failedLogin","tryLoginMethod","fn","result","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","token","setUserId","id","tokenExpires","_attemptLogin","methodName","methodArgs","methodArguments","toArray","extend","_loginMethod","_reportLoginFailure","registerLoginHandler","handler","_runLoginHandlers","i","length","call","destroyToken","loginToken","update","$pull","$or","hashedToken","accounts","methods","login","check","Object","arguments","logout","_getLoginToken","logoutOtherClients","fields","tokens","services","resume","loginTokens","newToken","$set","$push","_hashStampedToken","setTimeout","_deleteSavedTokensForUser","_noConnectionCloseDelayForTest","getNewToken","currentHashedToken","currentStampedToken","find","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","Match","ObjectIncluding","service","String","oauth","serviceNames","usingOAuthEncryption","secret","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","_id","profile","username","emails","autopublish","toFieldSelector","object","map","field","selector","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","_getAccountData","data","_setAccountData","value","hash","createHash","digest","_insertHashedLoginToken","query","$addToSet","_clearAllLoginTokens","_getUserObserve","observe","stop","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","defaultResumeLoginHandler","oldUnhashedStyleToken","Random","_expireTokens","oldestValidDate","tokenLifetimeMs","userFilter","$lt","multi","superResult","expireTokenInterval","clearInterval","setInterval","keyIsLoaded","pinEncryptedFieldsToUser","serviceData","isSealed","open","$and","$exists","forEach","defaultCreateUserHook","insertUserDoc","createdAt","fullUser","hook","code","err","indexOf","_testEmailDomain","email","domain","restrictCreationByEmailDomain","isFunction","isString","RegExp","_escapeRegExp","test","emailIsGood","isEmpty","any","address","updateOrCreateUserFromExternalService","serviceName","serviceIdKey","isNaN","parseInt","setAttrs","allow","modifier","fetch","_ensureIndex","unique","sparse","tokensToDelete","$unset","$pullAll","loginTokensToDelete","urls","resetPassword","absoluteUrl","verifyEmail","enrollAccount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,cAAR,QAA6B,sBAA7B;AACA,OAAO,0BAAP;AACA,OAAO,iBAAP;;AAEA;;;;AAIAC,WAAW,IAAID,cAAJ,CAAmBE,OAAOC,MAA1B,CAAX;;AAEA;AACA;AACA;;AAEA;;;;;;AAMAD,OAAOE,KAAP,GAAeH,SAASG,KAAxB;;AAEA;AACE;AACA;AACA;AACA;AACAJ,cALF,0G;;;;;;;;;;;;ACtBA;;;;;;;;;AASA,WAAaK,cAAb;AACE,0BAAYC,OAAZ,EAAqB;AAAA;;AACnB;AACA;AACA,SAAKC,QAAL,GAAgB,EAAhB;;AAEA;AACA;AACA,SAAKC,UAAL,GAAkBC,SAAlB;AACA,SAAKC,eAAL,CAAqBJ,WAAW,EAAhC;;AAEA;AACA;AACA,SAAKF,KAAL,GAAa,IAAIO,MAAMC,UAAV,CAAqB,OAArB,EAA8B;AACzCC,2BAAqB,IADoB;AAEzCL,kBAAY,KAAKA;AAFwB,KAA9B,CAAb;;AAKA;AACA,SAAKM,YAAL,GAAoB,IAAIC,IAAJ,CAAS;AAC3BC,uBAAiB,KADU;AAE3BC,4BAAsB;AAFK,KAAT,CAApB;;AAKA,SAAKC,mBAAL,GAA2B,IAAIH,IAAJ,CAAS;AAClCC,uBAAiB,KADiB;AAElCC,4BAAsB;AAFY,KAAT,CAA3B;AAID;;AAED;;;;;;AA9BF,2BAkCEE,MAlCF;AAAA,sBAkCW;AACP,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AApCH;AAAA;;AAsCE;;;;;;AAtCF,2BA0CEC,IA1CF;AAAA,oBA0CS;AACL,UAAIF,SAAS,KAAKA,MAAL,EAAb;AACA,aAAOA,SAAS,KAAKf,KAAL,CAAWkB,OAAX,CAAmBH,MAAnB,CAAT,GAAsC,IAA7C;AACD;;AA7CH;AAAA;;AA+CE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AAxEF,2BAkFEI,MAlFF;AAAA,oBAkFSjB,OAlFT,EAkFkB;AACd,UAAIkB,OAAO,IAAX;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAItB,OAAOuB,QAAX,EAAqB;AACnBC,kCAA0BC,oBAA1B,GAAiD,IAAjD;AACD,OAFD,MAEO,IAAI,CAACD,0BAA0BC,oBAA/B,EAAqD;AAC1D;AACA;AACAzB,eAAO0B,MAAP,CAAc,6DACA,yDADd;AAED;;AAED;AACA;AACA;AACA,UAAIC,EAAEC,GAAF,CAAMxB,OAAN,EAAe,gBAAf,CAAJ,EAAsC;AACpC,YAAIJ,OAAO6B,QAAX,EACE,MAAM,IAAIX,KAAJ,CAAU,+DAAV,CAAN;AACF,YAAI,CAAEY,QAAQ,kBAAR,CAAN,EACE,MAAM,IAAIZ,KAAJ,CAAU,mEAAV,CAAN;AACFY,gBAAQ,kBAAR,EAA4BC,eAA5B,CAA4CC,OAA5C,CAAoD5B,QAAQ6B,cAA5D;AACA7B,kBAAUuB,EAAEO,IAAF,CAAO9B,OAAP,EAAgB,gBAAhB,CAAV;AACD;;AAED;AACA,UAAI+B,aAAa,CAAC,uBAAD,EAA0B,6BAA1B,EACC,+BADD,EACkC,uBADlC,CAAjB;AAEAR,QAAES,IAAF,CAAOT,EAAEU,IAAF,CAAOjC,OAAP,CAAP,EAAwB,UAAUkC,GAAV,EAAe;AACrC,YAAI,CAACX,EAAEY,QAAF,CAAWJ,UAAX,EAAuBG,GAAvB,CAAL,EAAkC;AAChC,gBAAM,IAAIpB,KAAJ,CAAU,mCAAmCoB,GAA7C,CAAN;AACD;AACF,OAJD;;AAMA;AACAX,QAAES,IAAF,CAAOD,UAAP,EAAmB,UAAUG,GAAV,EAAe;AAChC,YAAIA,OAAOlC,OAAX,EAAoB;AAClB,cAAIkC,OAAOhB,KAAKjB,QAAhB,EAA0B;AACxB,kBAAM,IAAIa,KAAJ,CAAU,gBAAgBoB,GAAhB,GAAsB,kBAAhC,CAAN;AACD;AACDhB,eAAKjB,QAAL,CAAciC,GAAd,IAAqBlC,QAAQkC,GAAR,CAArB;AACD;AACF,OAPD;AAQD;;AAjIH;AAAA;;AAmIE;;;;;;;AAnIF,2BAwIEE,OAxIF;AAAA,qBAwIUC,IAxIV,EAwIgB;AACZ,aAAO,KAAK7B,YAAL,CAAkB8B,QAAlB,CAA2BD,IAA3B,CAAP;AACD;;AA1IH;AAAA;;AA4IE;;;;;;;AA5IF,2BAiJEE,cAjJF;AAAA,4BAiJiBF,IAjJjB,EAiJuB;AACnB,aAAO,KAAKzB,mBAAL,CAAyB0B,QAAzB,CAAkCD,IAAlC,CAAP;AACD;;AAnJH;AAAA;;AAAA,2BAqJEjC,eArJF;AAAA,6BAqJkBJ,OArJlB,EAqJ2B;AACvB,UAAI,CAAEJ,OAAO6B,QAAb,EAAuB;AACrB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIzB,QAAQE,UAAZ,EAAwB;AACtB,aAAKA,UAAL,GAAkBF,QAAQE,UAA1B;AACD,OAFD,MAEO,IAAIF,QAAQwC,MAAZ,EAAoB;AACzB,aAAKtC,UAAL,GAAkBuC,IAAIC,OAAJ,CAAY1C,QAAQwC,MAApB,CAAlB;AACD,OAFM,MAEA,IAAI,OAAOpB,yBAAP,KAAqC,WAArC,IACAA,0BAA0BuB,uBAD9B,EACuD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAKzC,UAAL,GACEuC,IAAIC,OAAJ,CAAYtB,0BAA0BuB,uBAAtC,CADF;AAED,OAXM,MAWA;AACL,aAAKzC,UAAL,GAAkBN,OAAOM,UAAzB;AACD;AACF;;AApLH;AAAA;;AAAA,2BAsLE0C,mBAtLF;AAAA,mCAsLwB;AACpB,aAAO,CAAC,KAAK3C,QAAL,CAAc4C,qBAAd,IACAC,6BADD,IACkC,EADlC,GACuC,EADvC,GAC4C,EAD5C,GACiD,IADxD;AAED;;AAzLH;AAAA;;AAAA,2BA2LEC,gBA3LF;AAAA,8BA2LmBC,IA3LnB,EA2LyB;AACrB;AACA;AACA,aAAO,IAAIC,IAAJ,CAAU,IAAIA,IAAJ,CAASD,IAAT,CAAD,CAAiBE,OAAjB,KAA6B,KAAKN,mBAAL,EAAtC,CAAP;AACD;;AA/LH;AAAA;;AAAA,2BAiMEO,iBAjMF;AAAA,+BAiMoBH,IAjMpB,EAiM0B;AACtB,UAAII,gBAAgB,KAAK,KAAKR,mBAAL,EAAzB;AACA,UAAIS,mBAAmBC,8BAA8B,IAArD;AACA,UAAIF,gBAAgBC,gBAApB,EACED,gBAAgBC,gBAAhB;AACF,aAAO,IAAIJ,IAAJ,KAAc,IAAIA,IAAJ,CAASD,IAAT,IAAiBI,aAAtC;AACD;;AAvMH;AAAA;;AAAA;AAAA;;AA0MA,IAAIG,KAAKxD,eAAeyD,SAAxB;;AAEA;AACA;;AAEA;;;;;AAKA5D,OAAOiB,MAAP,GAAgB,YAAY;AAC1B,SAAOlB,SAASkB,MAAT,EAAP;AACD,CAFD;;AAIA;;;;;AAKAjB,OAAOmB,IAAP,GAAc,YAAY;AACxB,SAAOpB,SAASoB,IAAT,EAAP;AACD,CAFD;;AAIA;AACA,IAAI+B,gCAAgC,EAApC;AACA;AACA;AACA;AACA,IAAIQ,8BAA8B,IAAlC,C,CAAwC;AACxC;AACAG,4BAA4B,MAAM,IAAlC,C,CAAwC;AACxC;AACA;AACAC,4BAA4B,KAAK,IAAjC;;AAEA;AACA9D,OAAO+D,OAAP,CAAe,YAAY;AACzB,MAAIC,uBACFlC,QAAQ,uBAAR,EAAiCkC,oBADnC;AAEAL,KAAGM,yBAAH,GAA+BD,qBAAqBE,cAApD;AACAP,KAAGQ,WAAH,GAAiBH,qBAAqBG,WAAtC;AACD,CALD;;AAOA;AACA;AACA,IAAIC,UAAU,8BAAd;AACAT,GAAGU,mBAAH,GAAyBrE,OAAOsE,aAAP,CACvBF,OADuB,EAEvB,UAAUG,WAAV,EAAuB;AACrB,OAAKC,OAAL,GAAeD,WAAf;AACD,CAJsB,CAAzB;AAMAZ,GAAGU,mBAAH,CAAuBT,SAAvB,CAAiCa,IAAjC,GAAwCL,OAAxC;;AAEA;AACA;AACA;AACAT,GAAGU,mBAAH,CAAuBK,YAAvB,GAAsC,SAAtC,0E;;;;;;;;;;;AC5QA,SAAQvE,cAAR,QAA6B,sBAA7B;;AAEA,IAAIwD,KAAKxD,eAAeyD,SAAxB;AACA,IAAIe,wBAAJ;AACA;AACAhB,GAAGiB,sBAAH,GAA4B,YAAY;AACtC,MAAMC,OAAOC,eAAeC,UAAf,CAA0BJ,wBAA1B,CAAb;AACAA,6BAA2B,IAA3B;AACA,SAAOE,IAAP;AACD,CAJD;;AAMA;AACA;AACAlB,GAAGqB,mBAAH,GAAyB,YAAY;AACnC,MAAI,CAACL,wBAAL,EAA+B;AAC7BA,+BAA2BG,eAAeG,OAAf,CAAuB;AAChDhE,cAAQ,IADwC;AAEhDiE,qBAAe,IAFiC;AAGhDC,YAAM,QAH0C;AAIhDV;AAAM,sBAAUA,KAAV,EAAgB;AACpB,iBAAO9C,EAAEY,QAAF,CAAW,CAAC,OAAD,EAAU,YAAV,EAAwB,eAAxB,EAChB,gBADgB,CAAX,EACckC,KADd,CAAP;AAED;;AAHD;AAAA,SAJgD;AAQhDW;AAAc,8BAAUA,aAAV,EAAwB;AACpC,iBAAO,IAAP;AACD;;AAFD;AAAA;AARgD,KAAvB,EAWxB,CAXwB,EAWrB,KAXqB,CAA3B;AAYD;AACF,CAfD;;AAiBAzB,GAAGqB,mBAAH,kG;;;;;;;;;;;;;;AC9BA,IAAIK,SAASC,IAAIC,OAAJ,CAAY,QAAZ,CAAb;;AAEA,SAAQpF,cAAR,QAA6B,sBAA7B;;AAEA;;;;;;;;AAQA,WAAaL,cAAb;AAAA;;AACE;AACA;AACA;AACA,0BAAYG,MAAZ,EAAoB;AAAA;;AAAA,iDAClB,0BADkB;;AAGlB,UAAKuF,OAAL,GAAevF,UAAUD,OAAOC,MAAhC;AACA;AACA,UAAKwF,kBAAL;;AAEA,UAAKC,qBAAL;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAKC,kBAAL,GAA0B;AACxBC,oBAAc,CAAC,SAAD,EAAY,UAAZ,EAAwB,QAAxB,CADU;AAExBC,kBAAY,CAAC,SAAD,EAAY,UAAZ;AAFY,KAA1B;AAIA,UAAKC,uBAAL;;AAEA;AACA,UAAKC,YAAL,GAAoB,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAKC,2BAAL,GAAmC,EAAnC;AACA,UAAKC,sBAAL,GAA8B,CAA9B,CA7BkB,CA6BgB;;AAElC;AACA,UAAKC,cAAL,GAAsB,EAAtB;;AAEAC,yBAAqB,MAAKjG,KAA1B;AACAkG;AACAC;;AAEA,UAAKC,kBAAL,GAA0B,IAAIzF,IAAJ,CAAS,EAAEC,iBAAiB,KAAnB,EAAT,CAA1B;AACA,UAAKyF,qBAAL,GAA6B,CAC3BC,2BAA2BC,IAA3B,OAD2B,CAA7B;;AAIA,UAAKC,sCAAL;;AAEA,UAAKC,iCAAL,GAAyC,EAAzC;AA7CkB;AA8CnB;;AAED;AACA;AACA;;AAEA;;;AAxDF,2BAyDE1F,MAzDF;AAAA,sBAyDW;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI2F,oBAAoB/D,IAAIgE,kBAAJ,CAAuBC,GAAvB,EAAxB;AACA,UAAI,CAACF,iBAAL,EACE,MAAM,IAAI1F,KAAJ,CAAU,0FAAV,CAAN;AACF,aAAO0F,kBAAkB3F,MAAzB;AACD;;AAvEH;AAAA;;AAyEE;AACA;AACA;;AAEA;;;;;;;AA7EF,2BAkFE8F,oBAlFF;AAAA,kCAkFuBtE,IAlFvB,EAkF6B;AACzB;AACA,aAAO,KAAK6D,kBAAL,CAAwB5D,QAAxB,CAAiCD,IAAjC,CAAP;AACD;;AArFH;AAAA;;AAuFE;;;;;;;AAvFF,2BA4FEuE,eA5FF;AAAA,6BA4FkBvE,IA5FlB,EA4FwB;AACpB,WAAK8D,qBAAL,CAA2BU,IAA3B,CAAgCxE,IAAhC;AACD;;AA9FH;AAAA;;AAgGE;AACA;AACA;;AAEA;;;;;;;AApGF,2BAyGEyE,YAzGF;AAAA,0BAyGezE,IAzGf,EAyGqB;AACjB,UAAI,KAAK0E,iBAAT,EAA4B;AAC1B,cAAM,IAAIjG,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,WAAKiG,iBAAL,GAAyB1E,IAAzB;AACD;;AA/GH;AAAA;;AAAA;AAAA,EAAoCtC,cAApC,EAgHC;;AAED,IAAIwD,KAAK7D,eAAe8D,SAAxB;;AAEA;AACA;AACA;AACA,SAASwD,0BAAT,CAAoC9G,UAApC,EAAgD+G,OAAhD,EAAyD;AACvD,MAAIC,gBAAgBC,MAAMC,KAAN,CAAYH,OAAZ,CAApB;AACAC,gBAAchH,UAAd,GAA2BA,UAA3B;AACA,SAAOgH,aAAP;AACD;;AAED3D,GAAG8D,cAAH,GAAoB,UAAUnH,UAAV,EAAsB+G,OAAtB,EAA+B;AACjD,OAAKf,kBAAL,CAAwBlE,IAAxB,CAA6B,UAAUsF,QAAV,EAAoB;AAC/C,QAAIC,GAAJ;AACA,QAAI;AACFA,YAAMD,SAASN,2BAA2B9G,UAA3B,EAAuC+G,OAAvC,CAAT,CAAN;AACD,KAFD,CAGA,OAAOO,CAAP,EAAU;AACRP,cAAQQ,OAAR,GAAkB,KAAlB;AACA;AACA;AACA;AACA;AACAR,cAAQS,KAAR,GAAgBF,CAAhB;AACA,aAAO,IAAP;AACD;AACD,QAAI,CAAED,GAAN,EAAW;AACTN,cAAQQ,OAAR,GAAkB,KAAlB;AACA;AACA;AACA,UAAI,CAACR,QAAQS,KAAb,EACET,QAAQS,KAAR,GAAgB,IAAI9H,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,iBAAtB,CAAhB;AACH;AACD,WAAO,IAAP;AACD,GAtBD;AAuBD,CAxBD;;AA2BAyC,GAAGoE,gBAAH,GAAsB,UAAUzH,UAAV,EAAsB+G,OAAtB,EAA+B;AACnD,OAAKzG,YAAL,CAAkBwB,IAAlB,CAAuB,UAAUsF,QAAV,EAAoB;AACzCA,aAASN,2BAA2B9G,UAA3B,EAAuC+G,OAAvC,CAAT;AACA,WAAO,IAAP;AACD,GAHD;AAID,CALD;;AAOA1D,GAAGqE,YAAH,GAAkB,UAAU1H,UAAV,EAAsB+G,OAAtB,EAA+B;AAC/C,OAAKrG,mBAAL,CAAyBoB,IAAzB,CAA8B,UAAUsF,QAAV,EAAoB;AAChDA,aAASN,2BAA2B9G,UAA3B,EAAuC+G,OAAvC,CAAT;AACA,WAAO,IAAP;AACD,GAHD;AAID,CALD;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAIY,iBAAiB,SAAjBA,cAAiB,CAAU9C,IAAV,EAAgB+C,EAAhB,EAAoB;AACvC,MAAIC,MAAJ;AACA,MAAI;AACFA,aAASD,IAAT;AACD,GAFD,CAGA,OAAON,CAAP,EAAU;AACRO,aAAS,EAACL,OAAOF,CAAR,EAAT;AACD;;AAED,MAAIO,UAAU,CAACA,OAAOhD,IAAlB,IAA0BA,IAA9B,EACEgD,OAAOhD,IAAP,GAAcA,IAAd;;AAEF,SAAOgD,MAAP;AACD,CAbD;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxE,GAAGyE,UAAH,GAAgB,UAAUC,gBAAV,EAA4BpH,MAA5B,EAAoCqH,iBAApC,EAAuD;AACrE,MAAIhH,OAAO,IAAX;;AAEA,MAAI,CAAEgH,iBAAN,EAAyB;AACvBA,wBAAoBhH,KAAKiH,0BAAL,EAApB;AACAjH,SAAKkH,iBAAL,CAAuBvH,MAAvB,EAA+BqH,iBAA/B;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtI,SAAOyI,gBAAP,CAAwB,YAAY;AAClCnH,SAAKoH,cAAL,CACEzH,MADF,EAEEoH,iBAAiB/H,UAFnB,EAGEgB,KAAKqH,eAAL,CAAqBL,kBAAkBM,KAAvC,CAHF;AAKD,GAND;;AAQAP,mBAAiBQ,SAAjB,CAA2B5H,MAA3B;;AAEA,SAAO;AACL6H,QAAI7H,MADC;AAEL2H,WAAON,kBAAkBM,KAFpB;AAGLG,kBAAczH,KAAK6B,gBAAL,CAAsBmF,kBAAkBlF,IAAxC;AAHT,GAAP;AAKD,CA7BD;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACAO,GAAGqF,aAAH,GAAmB,UACjBX,gBADiB,EAEjBY,UAFiB,EAGjBC,UAHiB,EAIjBf,MAJiB,EAKjB;AACA,MAAI,CAACA,MAAL,EACE,MAAM,IAAIjH,KAAJ,CAAU,oBAAV,CAAN;;AAEF;AACA;AACA;AACA,MAAI,CAACiH,OAAOlH,MAAR,IAAkB,CAACkH,OAAOL,KAA9B,EACE,MAAM,IAAI5G,KAAJ,CAAU,kDAAV,CAAN;;AAEF,MAAIC,IAAJ;AACA,MAAIgH,OAAOlH,MAAX,EACEE,OAAO,KAAKjB,KAAL,CAAWkB,OAAX,CAAmB+G,OAAOlH,MAA1B,CAAP;;AAEF,MAAIoG,UAAU;AACZlC,UAAMgD,OAAOhD,IAAP,IAAe,SADT;AAEZ0C,aAAS,CAAC,EAAGM,OAAOlH,MAAP,IAAiB,CAACkH,OAAOL,KAA5B,CAFE;AAGZmB,gBAAYA,UAHA;AAIZE,qBAAiBxH,EAAEyH,OAAF,CAAUF,UAAV;AAJL,GAAd;AAMA,MAAIf,OAAOL,KAAX,EACET,QAAQS,KAAR,GAAgBK,OAAOL,KAAvB;AACF,MAAI3G,IAAJ,EACEkG,QAAQlG,IAAR,GAAeA,IAAf;;AAEF;AACA;AACA;AACA,OAAKsG,cAAL,CAAoBY,iBAAiB/H,UAArC,EAAiD+G,OAAjD;;AAEA,MAAIA,QAAQQ,OAAZ,EAAqB;AACnB,QAAIF,MAAMhG,EAAE0H,MAAF,CACR,KAAKjB,UAAL,CACEC,gBADF,EAEEF,OAAOlH,MAFT,EAGEkH,OAAOG,iBAHT,CADQ,EAMRH,OAAO/H,OAAP,IAAkB,EANV,CAAV;AAQA,SAAK2H,gBAAL,CAAsBM,iBAAiB/H,UAAvC,EAAmD+G,OAAnD;AACA,WAAOM,GAAP;AACD,GAXD,MAYK;AACH,SAAKK,YAAL,CAAkBK,iBAAiB/H,UAAnC,EAA+C+G,OAA/C;AACA,UAAMA,QAAQS,KAAd;AACD;AACF,CAnDD;;AAsDA;AACA;AACA;AACA;AACAnE,GAAG2F,YAAH,GAAkB,UAChBjB,gBADgB,EAEhBY,UAFgB,EAGhBC,UAHgB,EAIhB/D,IAJgB,EAKhB+C,EALgB,EAMhB;AACA,SAAO,KAAKc,aAAL,CACLX,gBADK,EAELY,UAFK,EAGLC,UAHK,EAILjB,eAAe9C,IAAf,EAAqB+C,EAArB,CAJK,CAAP;AAMD,CAbD;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvE,GAAG4F,mBAAH,GAAyB,UACvBlB,gBADuB,EAEvBY,UAFuB,EAGvBC,UAHuB,EAIvBf,MAJuB,EAKvB;AACA,MAAId,UAAU;AACZlC,UAAMgD,OAAOhD,IAAP,IAAe,SADT;AAEZ0C,aAAS,KAFG;AAGZC,WAAOK,OAAOL,KAHF;AAIZmB,gBAAYA,UAJA;AAKZE,qBAAiBxH,EAAEyH,OAAF,CAAUF,UAAV;AALL,GAAd;;AAQA,MAAIf,OAAOlH,MAAX,EAAmB;AACjBoG,YAAQlG,IAAR,GAAe,KAAKjB,KAAL,CAAWkB,OAAX,CAAmB+G,OAAOlH,MAA1B,CAAf;AACD;;AAED,OAAKwG,cAAL,CAAoBY,iBAAiB/H,UAArC,EAAiD+G,OAAjD;AACA,OAAKW,YAAL,CAAkBK,iBAAiB/H,UAAnC,EAA+C+G,OAA/C;;AAEA;AACA;AACA,SAAOA,OAAP;AACD,CAxBD;;AA2BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1D,GAAG6F,oBAAH,GAA0B,UAAU/E,IAAV,EAAgBgF,OAAhB,EAAyB;AACjD,MAAI,CAAEA,OAAN,EAAe;AACbA,cAAUhF,IAAV;AACAA,WAAO,IAAP;AACD;;AAED,OAAKyB,cAAL,CAAoBe,IAApB,CAAyB;AACvBxC,UAAMA,IADiB;AAEvBgF,aAASA;AAFc,GAAzB;AAID,CAVD;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA9F,GAAG+F,iBAAH,GAAuB,UAAUrB,gBAAV,EAA4BjI,OAA5B,EAAqC;AAC1D,OAAK,IAAIuJ,IAAI,CAAb,EAAgBA,IAAI,KAAKzD,cAAL,CAAoB0D,MAAxC,EAAgD,EAAED,CAAlD,EAAqD;AACnD,QAAIF,UAAU,KAAKvD,cAAL,CAAoByD,CAApB,CAAd;;AAEA,QAAIxB,SAASF,eACXwB,QAAQhF,IADG,EAEX,YAAY;AACV,aAAOgF,QAAQA,OAAR,CAAgBI,IAAhB,CAAqBxB,gBAArB,EAAuCjI,OAAvC,CAAP;AACD,KAJU,CAAb;;AAOA,QAAI+H,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;;AAED,QAAIA,WAAW5H,SAAf,EAA0B;AACxB,YAAM,IAAIP,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,qDAAtB,CAAN;AACD;AACF;;AAED,SAAO;AACLiE,UAAM,IADD;AAEL2C,WAAO,IAAI9H,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,wCAAtB;AAFF,GAAP;AAID,CAxBD;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyC,GAAGmG,YAAH,GAAkB,UAAU7I,MAAV,EAAkB8I,UAAlB,EAA8B;AAC9C,OAAK7J,KAAL,CAAW8J,MAAX,CAAkB/I,MAAlB,EAA0B;AACxBgJ,WAAO;AACL,qCAA+B;AAC7BC,aAAK,CACH,EAAEC,aAAaJ,UAAf,EADG,EAEH,EAAEnB,OAAOmB,UAAT,EAFG;AADwB;AAD1B;AADiB,GAA1B;AAUD,CAXD;;AAaApG,GAAG8B,kBAAH,GAAwB,YAAY;AAClC;AACA;AACA,MAAI2E,WAAW,IAAf;;AAEA;AACA;AACA,MAAIC,UAAU,EAAd;;AAEA;AACA;AACA;AACA;AACAA,UAAQC,KAAR,GAAgB,UAAUlK,OAAV,EAAmB;AACjC,QAAIkB,OAAO,IAAX;;AAEA;AACA;AACAiJ,UAAMnK,OAAN,EAAeoK,MAAf;;AAEA,QAAIrC,SAASiC,SAASV,iBAAT,CAA2BpI,IAA3B,EAAiClB,OAAjC,CAAb;;AAEA,WAAOgK,SAASpB,aAAT,CAAuB1H,IAAvB,EAA6B,OAA7B,EAAsCmJ,SAAtC,EAAiDtC,MAAjD,CAAP;AACD,GAVD;;AAYAkC,UAAQK,MAAR,GAAiB,YAAY;AAC3B,QAAI9B,QAAQwB,SAASO,cAAT,CAAwB,KAAKrK,UAAL,CAAgBwI,EAAxC,CAAZ;AACAsB,aAAS1B,cAAT,CAAwB,KAAKzH,MAA7B,EAAqC,KAAKX,UAA1C,EAAsD,IAAtD;AACA,QAAIsI,SAAS,KAAK3H,MAAlB,EACEmJ,SAASN,YAAT,CAAsB,KAAK7I,MAA3B,EAAmC2H,KAAnC;AACF,SAAKC,SAAL,CAAe,IAAf;AACD,GAND;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAwB,UAAQO,kBAAR,GAA6B,YAAY;AACvC,QAAItJ,OAAO,IAAX;AACA,QAAIH,OAAOiJ,SAASlK,KAAT,CAAekB,OAAf,CAAuBE,KAAKL,MAA5B,EAAoC;AAC7C4J,cAAQ;AACN,uCAA+B;AADzB;AADqC,KAApC,CAAX;AAKA,QAAI1J,IAAJ,EAAU;AACR;AACA;AACA;AACA;AACA;AACA,UAAI2J,SAAS3J,KAAK4J,QAAL,CAAcC,MAAd,CAAqBC,WAAlC;AACA,UAAIC,WAAWd,SAAS7B,0BAAT,EAAf;AACA,UAAItH,SAASK,KAAKL,MAAlB;AACAmJ,eAASlK,KAAT,CAAe8J,MAAf,CAAsB/I,MAAtB,EAA8B;AAC5BkK,cAAM;AACJ,iDAAuCL,MADnC;AAEJ,qDAA2C;AAFvC,SADsB;AAK5BM,eAAO,EAAE,+BAA+BhB,SAASiB,iBAAT,CAA2BH,QAA3B,CAAjC;AALqB,OAA9B;AAOAlL,aAAOsL,UAAP,CAAkB,YAAY;AAC5B;AACA;AACAlB,iBAASmB,yBAAT,CAAmCtK,MAAnC,EAA2C6J,MAA3C;AACD,OAJD,EAIGV,SAASoB,8BAAT,GAA0C,CAA1C,GACe1H,yBALlB;AAMA;AACA;AACA;AACA,aAAO;AACL8E,eAAOsC,SAAStC,KADX;AAELG,sBAAcqB,SAASjH,gBAAT,CAA0B+H,SAAS9H,IAAnC;AAFT,OAAP;AAID,KA7BD,MA6BO;AACL,YAAM,IAAIpD,OAAOkB,KAAX,CAAiB,wBAAjB,CAAN;AACD;AACF,GAvCD;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmJ,UAAQoB,WAAR,GAAsB,YAAY;AAChC,QAAInK,OAAO,IAAX;AACA,QAAIH,OAAOiJ,SAASlK,KAAT,CAAekB,OAAf,CAAuBE,KAAKL,MAA5B,EAAoC;AAC7C4J,cAAQ,EAAE,+BAA+B,CAAjC;AADqC,KAApC,CAAX;AAGA,QAAI,CAAEvJ,KAAKL,MAAP,IAAiB,CAAEE,IAAvB,EAA6B;AAC3B,YAAM,IAAInB,OAAOkB,KAAX,CAAiB,wBAAjB,CAAN;AACD;AACD;AACA;AACA;AACA;AACA,QAAIwK,qBAAqBtB,SAASO,cAAT,CAAwBrJ,KAAKhB,UAAL,CAAgBwI,EAAxC,CAAzB;AACA,QAAI6C,sBAAsBhK,EAAEiK,IAAF,CACxBzK,KAAK4J,QAAL,CAAcC,MAAd,CAAqBC,WADG,EAExB,UAAUY,YAAV,EAAwB;AACtB,aAAOA,aAAa1B,WAAb,KAA6BuB,kBAApC;AACD,KAJuB,CAA1B;AAMA,QAAI,CAAEC,mBAAN,EAA2B;AAAE;AAC3B,YAAM,IAAI3L,OAAOkB,KAAX,CAAiB,qBAAjB,CAAN;AACD;AACD,QAAI4K,kBAAkB1B,SAAS7B,0BAAT,EAAtB;AACAuD,oBAAgB1I,IAAhB,GAAuBuI,oBAAoBvI,IAA3C;AACAgH,aAAS5B,iBAAT,CAA2BlH,KAAKL,MAAhC,EAAwC6K,eAAxC;AACA,WAAO1B,SAAShC,UAAT,CAAoB9G,IAApB,EAA0BA,KAAKL,MAA/B,EAAuC6K,eAAvC,CAAP;AACD,GA1BD;;AA4BA;AACA;AACA;AACAzB,UAAQ0B,iBAAR,GAA4B,YAAY;AACtC,QAAIzK,OAAO,IAAX;AACA,QAAI,CAAEA,KAAKL,MAAX,EAAmB;AACjB,YAAM,IAAIjB,OAAOkB,KAAX,CAAiB,wBAAjB,CAAN;AACD;AACD,QAAI8K,eAAe5B,SAASO,cAAT,CAAwBrJ,KAAKhB,UAAL,CAAgBwI,EAAxC,CAAnB;AACAsB,aAASlK,KAAT,CAAe8J,MAAf,CAAsB1I,KAAKL,MAA3B,EAAmC;AACjCgJ,aAAO;AACL,uCAA+B,EAAEE,aAAa,EAAE8B,KAAKD,YAAP,EAAf;AAD1B;AAD0B,KAAnC;AAKD,GAXD;;AAaA;AACA;AACA3B,UAAQ6B,qBAAR,GAAgC,UAAU9L,OAAV,EAAmB;AACjDmK,UAAMnK,OAAN,EAAe+L,MAAMC,eAAN,CAAsB,EAACC,SAASC,MAAV,EAAtB,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,EAAElC,SAASmC,KAAT,IACG5K,EAAEY,QAAF,CAAW6H,SAASmC,KAAT,CAAeC,YAAf,EAAX,EAA0CpM,QAAQiM,OAAlD,CADL,CAAJ,EACsE;AACpE,YAAM,IAAIrM,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,iBAAtB,CAAN;AACD;;AAED,QAAI8C,uBACFlC,QAAQ,uBAAR,EAAiCkC,oBADnC;AAEA,QAAIA,qBAAqBE,cAArB,CAAoC9C,OAApC,CAA4C,EAACiL,SAASjM,QAAQiM,OAAlB,EAA5C,CAAJ,EACE,MAAM,IAAIrM,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,aAAad,QAAQiM,OAArB,GAA+B,qBAArD,CAAN;;AAEF,QAAI1K,EAAEC,GAAF,CAAMxB,OAAN,EAAe,QAAf,KAA4BqM,sBAAhC,EACErM,QAAQsM,MAAR,GAAiB3K,gBAAgB4K,IAAhB,CAAqBvM,QAAQsM,MAA7B,CAAjB;;AAEF1I,yBAAqBE,cAArB,CAAoC0I,MAApC,CAA2CxM,OAA3C;AACD,GAtBD;;AAwBAgK,WAAS5E,OAAT,CAAiB6E,OAAjB,CAAyBA,OAAzB;AACD,CA1KD;;AA4KA1G,GAAG+B,qBAAH,GAA2B,YAAY;AACrC,MAAI0E,WAAW,IAAf;;AAEAA,WAAS5E,OAAT,CAAiBqH,YAAjB,CAA8B,UAAUvM,UAAV,EAAsB;AAClD8J,aAASrE,YAAT,CAAsBzF,WAAWwI,EAAjC,IAAuC;AACrCxI,kBAAYA;AADyB,KAAvC;;AAIAA,eAAWwM,OAAX,CAAmB,YAAY;AAC7B1C,eAAS2C,0BAAT,CAAoCzM,WAAWwI,EAA/C;AACA,aAAOsB,SAASrE,YAAT,CAAsBzF,WAAWwI,EAAjC,CAAP;AACD,KAHD;AAID,GATD;AAUD,CAbD;;AAeAnF,GAAGmC,uBAAH,GAA6B,YAAY;AACvC,MAAIsE,WAAW,IAAf;;AAEA;AACAA,WAAS5E,OAAT,CAAiBwH,OAAjB,CAAyB,kCAAzB,EAA6D,YAAY;AACvE,QAAIhJ,uBACFlC,QAAQ,uBAAR,EAAiCkC,oBADnC;AAEA,WAAOA,qBAAqBE,cAArB,CAAoC0H,IAApC,CAAyC,EAAzC,EAA6C,EAACf,QAAQ,EAAC6B,QAAQ,CAAT,EAAT,EAA7C,CAAP;AACD,GAJD,EAIG,EAACO,SAAS,IAAV,EAJH,EAJuC,CAQlB;;AAErB;AACA7C,WAAS5E,OAAT,CAAiBwH,OAAjB,CAAyB,IAAzB,EAA+B,YAAY;AACzC,QAAI,KAAK/L,MAAT,EAAiB;AACf,aAAOmJ,SAASlK,KAAT,CAAe0L,IAAf,CAAoB;AACzBsB,aAAK,KAAKjM;AADe,OAApB,EAEJ;AACD4J,gBAAQ;AACNsC,mBAAS,CADH;AAENC,oBAAU,CAFJ;AAGNC,kBAAQ;AAHF;AADP,OAFI,CAAP;AASD,KAVD,MAUO;AACL,aAAO,IAAP;AACD;AACF,GAdD,EAcG,gCAAgC,EAACJ,SAAS,IAAV,EAdnC;;AAgBA;AACA;AACAnL,UAAQwL,WAAR,IAAuBtN,OAAO+D,OAAP,CAAe,YAAY;AAChD;AACA,QAAIwJ,kBAAkB,SAAlBA,eAAkB,CAAU1C,MAAV,EAAkB;AACtC,aAAOlJ,EAAE6L,MAAF,CAAS7L,EAAE8L,GAAF,CAAM5C,MAAN,EAAc,UAAU6C,KAAV,EAAiB;AAC7C,eAAO,CAACA,KAAD,EAAQ,CAAR,CAAP;AACD,OAFe,CAAT,CAAP;AAGD,KAJD;;AAMAtD,aAAS5E,OAAT,CAAiBwH,OAAjB,CAAyB,IAAzB,EAA+B,YAAY;AACzC,UAAI,KAAK/L,MAAT,EAAiB;AACf,eAAOmJ,SAASlK,KAAT,CAAe0L,IAAf,CAAoB;AACzBsB,eAAK,KAAKjM;AADe,SAApB,EAEJ;AACD4J,kBAAQ0C,gBAAgBnD,SAASzE,kBAAT,CAA4BC,YAA5C;AADP,SAFI,CAAP;AAKD,OAND,MAMO;AACL,eAAO,IAAP;AACD;AACF,KAVD,EAUG,gCAAgC,EAACqH,SAAS,IAAV,EAVnC;;AAYA;AACA;AACA;AACA;AACA;AACA7C,aAAS5E,OAAT,CAAiBwH,OAAjB,CAAyB,IAAzB,EAA+B,YAAY;AACzC,UAAIW,WAAW,KAAK1M,MAAL,GAAc;AAC3BiM,aAAK,EAAEjB,KAAK,KAAKhL,MAAZ;AADsB,OAAd,GAEX,EAFJ;;AAIA,aAAOmJ,SAASlK,KAAT,CAAe0L,IAAf,CAAoB+B,QAApB,EAA8B;AACnC9C,gBAAQ0C,gBAAgBnD,SAASzE,kBAAT,CAA4BE,UAA5C;AAD2B,OAA9B,CAAP;AAGD,KARD,EAQG,gCAAgC,EAACoH,SAAS,IAAV,EARnC;AASD,GAlCsB,CAAvB;AAmCD,CAhED;;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtJ,GAAGiK,oBAAH,GAA0B,UAAUC,IAAV,EAAgB;AACxC,OAAKlI,kBAAL,CAAwBC,YAAxB,CAAqCqB,IAArC,CAA0C6G,KAA1C,CACE,KAAKnI,kBAAL,CAAwBC,YAD1B,EACwCiI,KAAKE,eAD7C;AAEA,OAAKpI,kBAAL,CAAwBE,UAAxB,CAAmCoB,IAAnC,CAAwC6G,KAAxC,CACE,KAAKnI,kBAAL,CAAwBE,UAD1B,EACsCgI,KAAKG,aAD3C;AAED,CALD;;AAOA;AACA;AACA;;AAEA;AACA;AACArK,GAAGsK,eAAH,GAAqB,UAAU7I,YAAV,EAAwBsI,KAAxB,EAA+B;AAClD,MAAIQ,OAAO,KAAKnI,YAAL,CAAkBX,YAAlB,CAAX;AACA,SAAO8I,QAAQA,KAAKR,KAAL,CAAf;AACD,CAHD;;AAKA/J,GAAGwK,eAAH,GAAqB,UAAU/I,YAAV,EAAwBsI,KAAxB,EAA+BU,KAA/B,EAAsC;AACzD,MAAIF,OAAO,KAAKnI,YAAL,CAAkBX,YAAlB,CAAX;;AAEA;AACA;AACA,MAAI,CAAC8I,IAAL,EACE;;AAEF,MAAIE,UAAU7N,SAAd,EACE,OAAO2N,KAAKR,KAAL,CAAP,CADF,KAGEQ,KAAKR,KAAL,IAAcU,KAAd;AACH,CAZD;;AAeA;AACA;AACA;AACA;;AAEAzK,GAAGgF,eAAH,GAAqB,UAAUoB,UAAV,EAAsB;AACzC,MAAIsE,OAAOhJ,OAAOiJ,UAAP,CAAkB,QAAlB,CAAX;AACAD,OAAKrE,MAAL,CAAYD,UAAZ;AACA,SAAOsE,KAAKE,MAAL,CAAY,QAAZ,CAAP;AACD,CAJD;;AAOA;AACA5K,GAAG0H,iBAAH,GAAuB,UAAUQ,YAAV,EAAwB;AAC7C,SAAOlK,EAAE0H,MAAF,CAAS1H,EAAEO,IAAF,CAAO2J,YAAP,EAAqB,OAArB,CAAT,EAAwC;AAC7C1B,iBAAa,KAAKxB,eAAL,CAAqBkD,aAAajD,KAAlC;AADgC,GAAxC,CAAP;AAGD,CAJD;;AAOA;AACA;AACA;AACAjF,GAAG6K,uBAAH,GAA6B,UAAUvN,MAAV,EAAkBkJ,WAAlB,EAA+BsE,KAA/B,EAAsC;AACjEA,UAAQA,QAAQ9M,EAAE6F,KAAF,CAAQiH,KAAR,CAAR,GAAyB,EAAjC;AACAA,QAAMvB,GAAN,GAAYjM,MAAZ;AACA,OAAKf,KAAL,CAAW8J,MAAX,CAAkByE,KAAlB,EAAyB;AACvBC,eAAW;AACT,qCAA+BvE;AADtB;AADY,GAAzB;AAKD,CARD;;AAWA;AACAxG,GAAG6E,iBAAH,GAAuB,UAAUvH,MAAV,EAAkB4K,YAAlB,EAAgC4C,KAAhC,EAAuC;AAC5D,OAAKD,uBAAL,CACEvN,MADF,EAEE,KAAKoK,iBAAL,CAAuBQ,YAAvB,CAFF,EAGE4C,KAHF;AAKD,CAND;;AASA9K,GAAGgL,oBAAH,GAA0B,UAAU1N,MAAV,EAAkB;AAC1C,OAAKf,KAAL,CAAW8J,MAAX,CAAkB/I,MAAlB,EAA0B;AACxBkK,UAAM;AACJ,qCAA+B;AAD3B;AADkB,GAA1B;AAKD,CAND;;AAQA;AACAxH,GAAGiL,eAAH,GAAqB,UAAUxJ,YAAV,EAAwB;AAC3C,SAAO,KAAKY,2BAAL,CAAiCZ,YAAjC,CAAP;AACD,CAFD;;AAIA;AACA;AACA;AACAzB,GAAGoJ,0BAAH,GAAgC,UAAU3H,YAAV,EAAwB;AACtD,MAAIzD,EAAEC,GAAF,CAAM,KAAKoE,2BAAX,EAAwCZ,YAAxC,CAAJ,EAA2D;AACzD,QAAIyJ,UAAU,KAAK7I,2BAAL,CAAiCZ,YAAjC,CAAd;AACA,QAAI,OAAOyJ,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACA;AACA;AACA;AACA,aAAO,KAAK7I,2BAAL,CAAiCZ,YAAjC,CAAP;AACD,KAND,MAMO;AACL,aAAO,KAAKY,2BAAL,CAAiCZ,YAAjC,CAAP;AACAyJ,cAAQC,IAAR;AACD;AACF;AACF,CAdD;;AAgBAnL,GAAGgH,cAAH,GAAoB,UAAUvF,YAAV,EAAwB;AAC1C,SAAO,KAAK6I,eAAL,CAAqB7I,YAArB,EAAmC,YAAnC,CAAP;AACD,CAFD;;AAIA;AACAzB,GAAG+E,cAAH,GAAoB,UAAUzH,MAAV,EAAkBX,UAAlB,EAA8B4K,QAA9B,EAAwC;AAC1D,MAAI5J,OAAO,IAAX;;AAEAA,OAAKyL,0BAAL,CAAgCzM,WAAWwI,EAA3C;AACAxH,OAAK6M,eAAL,CAAqB7N,WAAWwI,EAAhC,EAAoC,YAApC,EAAkDoC,QAAlD;;AAEA,MAAIA,QAAJ,EAAc;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI6D,kBAAkB,EAAEzN,KAAK2E,sBAA7B;AACA3E,SAAK0E,2BAAL,CAAiC1F,WAAWwI,EAA5C,IAAkDiG,eAAlD;AACA/O,WAAOgP,KAAP,CAAa,YAAY;AACvB;AACA;AACA;AACA;AACA,UAAI1N,KAAK0E,2BAAL,CAAiC1F,WAAWwI,EAA5C,MAAoDiG,eAAxD,EAAyE;AACvE;AACD;;AAED,UAAIE,iBAAJ;AACA;AACA;AACA;AACA,UAAIJ,UAAUvN,KAAKpB,KAAL,CAAW0L,IAAX,CAAgB;AAC5BsB,aAAKjM,MADuB;AAE5B,mDAA2CiK;AAFf,OAAhB,EAGX,EAAEL,QAAQ,EAAEqC,KAAK,CAAP,EAAV,EAHW,EAGagC,cAHb,CAG4B;AACxCC;AAAO,2BAAY;AACjBF,gCAAoB,IAApB;AACD;;AAFD;AAAA,WADwC;AAIxCG;AAAS,6BAAY;AACnB9O,uBAAW+O,KAAX;AACA;AACA;AACA;AACD;;AALD;AAAA;AAJwC,OAH5B,CAAd;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI/N,KAAK0E,2BAAL,CAAiC1F,WAAWwI,EAA5C,MAAoDiG,eAAxD,EAAyE;AACvEF,gBAAQC,IAAR;AACA;AACD;;AAEDxN,WAAK0E,2BAAL,CAAiC1F,WAAWwI,EAA5C,IAAkD+F,OAAlD;;AAEA,UAAI,CAAEI,iBAAN,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACA3O,mBAAW+O,KAAX;AACD;AACF,KAnDD;AAoDD;AACF,CA3ED;;AA6EA,SAASjJ,yBAAT,CAAmCgE,QAAnC,EAA6C;AAC3CA,WAASZ,oBAAT,CAA8B,QAA9B,EAAwC,UAAUpJ,OAAV,EAAmB;AACzD,WAAOkP,0BAA0BzF,IAA1B,CAA+B,IAA/B,EAAqCO,QAArC,EAA+ChK,OAA/C,CAAP;AACD,GAFD;AAGD;;AAED;AACA,SAASkP,yBAAT,CAAmClF,QAAnC,EAA6ChK,OAA7C,EAAsD;AACpD,MAAI,CAACA,QAAQ4K,MAAb,EACE,OAAOzK,SAAP;;AAEFgK,QAAMnK,QAAQ4K,MAAd,EAAsBsB,MAAtB;;AAEA,MAAInC,cAAcC,SAASzB,eAAT,CAAyBvI,QAAQ4K,MAAjC,CAAlB;;AAEA;AACA;AACA;AACA,MAAI7J,OAAOiJ,SAASlK,KAAT,CAAekB,OAAf,CACT,EAAC,2CAA2C+I,WAA5C,EADS,CAAX;;AAGA,MAAI,CAAEhJ,IAAN,EAAY;AACV;AACA;AACA;AACA;AACA;AACAA,WAAOiJ,SAASlK,KAAT,CAAekB,OAAf,CAAuB;AAC5B8I,WAAK,CACH,EAAC,2CAA2CC,WAA5C,EADG,EAEH,EAAC,qCAAqC/J,QAAQ4K,MAA9C,EAFG;AADuB,KAAvB,CAAP;AAMD;;AAED,MAAI,CAAE7J,IAAN,EACE,OAAO;AACL2G,WAAO,IAAI9H,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,4DAAtB;AADF,GAAP;;AAIF;AACA;AACA;AACA,MAAIqO,qBAAJ;AACA,MAAI3G,QAAQjH,EAAEiK,IAAF,CAAOzK,KAAK4J,QAAL,CAAcC,MAAd,CAAqBC,WAA5B,EAAyC,UAAUrC,KAAV,EAAiB;AACpE,WAAOA,MAAMuB,WAAN,KAAsBA,WAA7B;AACD,GAFW,CAAZ;AAGA,MAAIvB,KAAJ,EAAW;AACT2G,4BAAwB,KAAxB;AACD,GAFD,MAEO;AACL3G,YAAQjH,EAAEiK,IAAF,CAAOzK,KAAK4J,QAAL,CAAcC,MAAd,CAAqBC,WAA5B,EAAyC,UAAUrC,KAAV,EAAiB;AAChE,aAAOA,MAAMA,KAAN,KAAgBxI,QAAQ4K,MAA/B;AACD,KAFO,CAAR;AAGAuE,4BAAwB,IAAxB;AACD;;AAED,MAAIxG,eAAeqB,SAASjH,gBAAT,CAA0ByF,MAAMxF,IAAhC,CAAnB;AACA,MAAI,IAAIC,IAAJ,MAAc0F,YAAlB,EACE,OAAO;AACL9H,YAAQE,KAAK+L,GADR;AAELpF,WAAO,IAAI9H,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,gDAAtB;AAFF,GAAP;;AAKF;AACA,MAAIqO,qBAAJ,EAA2B;AACzB;AACA;AACA;AACA;AACA;AACAnF,aAASlK,KAAT,CAAe8J,MAAf,CACE;AACEkD,WAAK/L,KAAK+L,GADZ;AAEE,2CAAqC9M,QAAQ4K;AAF/C,KADF,EAKE,EAAC0D,WAAW;AACV,uCAA+B;AAC7B,yBAAevE,WADc;AAE7B,kBAAQvB,MAAMxF;AAFe;AADrB,OAAZ,EALF;;AAaA;AACA;AACA;AACAgH,aAASlK,KAAT,CAAe8J,MAAf,CAAsB7I,KAAK+L,GAA3B,EAAgC;AAC9BjD,aAAO;AACL,uCAA+B,EAAE,SAAS7J,QAAQ4K,MAAnB;AAD1B;AADuB,KAAhC;AAKD;;AAED,SAAO;AACL/J,YAAQE,KAAK+L,GADR;AAEL5E,uBAAmB;AACjBM,aAAOxI,QAAQ4K,MADE;AAEjB5H,YAAMwF,MAAMxF;AAFK;AAFd,GAAP;AAOD;;AAED;AACA;AACAO,GAAG4E,0BAAH,GAAgC,YAAY;AAC1C,SAAO;AACLK,WAAO4G,OAAO9C,MAAP,EADF;AAELtJ,UAAM,IAAIC,IAAJ;AAFD,GAAP;AAID,CALD;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,GAAG8L,aAAH,GAAmB,UAAUC,eAAV,EAA2BzO,MAA3B,EAAmC;AACpD,MAAI0O,kBAAkB,KAAK3M,mBAAL,EAAtB;;AAEA;AACA,MAAK0M,mBAAmB,CAACzO,MAArB,IAAiC,CAACyO,eAAD,IAAoBzO,MAAzD,EAAkE;AAChE,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAEDwO,oBAAkBA,mBACf,IAAIrM,IAAJ,CAAS,IAAIA,IAAJ,KAAasM,eAAtB,CADH;AAEA,MAAIC,aAAa3O,SAAS,EAACiM,KAAKjM,MAAN,EAAT,GAAyB,EAA1C;;AAGA;AACA;AACA,OAAKf,KAAL,CAAW8J,MAAX,CAAkBrI,EAAE0H,MAAF,CAASuG,UAAT,EAAqB;AACrC1F,SAAK,CACH,EAAE,oCAAoC,EAAE2F,KAAKH,eAAP,EAAtC,EADG,EAEH,EAAE,oCAAoC,EAAEG,KAAK,CAACH,eAAR,EAAtC,EAFG;AADgC,GAArB,CAAlB,EAKI;AACFzF,WAAO;AACL,qCAA+B;AAC7BC,aAAK,CACH,EAAE9G,MAAM,EAAEyM,KAAKH,eAAP,EAAR,EADG,EAEH,EAAEtM,MAAM,EAAEyM,KAAK,CAACH,eAAR,EAAR,EAFG;AADwB;AAD1B;AADL,GALJ,EAcG,EAAEI,OAAO,IAAT,EAdH;AAeA;AACA;AACD,CAhCD;;AAkCA;AACAnM,GAAGtC,MAAH,GAAY,UAAUjB,OAAV,EAAmB;AAC7B;AACA,MAAI2P,cAAc5P,eAAeyD,SAAf,CAAyBvC,MAAzB,CAAgCyM,KAAhC,CAAsC,IAAtC,EAA4CrD,SAA5C,CAAlB;;AAEA;AACA;AACA,MAAI9I,EAAEC,GAAF,CAAM,KAAKvB,QAAX,EAAqB,uBAArB,KACA,KAAKA,QAAL,CAAc4C,qBAAd,KAAwC,IADxC,IAEA,KAAK+M,mBAFT,EAE8B;AAC5BhQ,WAAOiQ,aAAP,CAAqB,KAAKD,mBAA1B;AACA,SAAKA,mBAAL,GAA2B,IAA3B;AACD;;AAED,SAAOD,WAAP;AACD,CAdD;;AAgBA,SAAS1J,uBAAT,CAAiC+D,QAAjC,EAA2C;AACzCA,WAAS4F,mBAAT,GAA+BhQ,OAAOkQ,WAAP,CAAmB,YAAY;AAC5D9F,aAASqF,aAAT;AACD,GAF8B,EAE5B5L,yBAF4B,CAA/B;AAGD;;AAGD;AACA;AACA;;AAEA,IAAI9B,kBACFD,QAAQ,kBAAR,KACAA,QAAQ,kBAAR,EAA4BC,eAF9B;;AAIA,SAAS0K,oBAAT,GAAgC;AAC9B,SAAO1K,mBAAmBA,gBAAgBoO,WAAhB,EAA1B;AACD;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAT,CAAkCC,WAAlC,EAA+CpP,MAA/C,EAAuD;AACrDU,IAAES,IAAF,CAAOT,EAAEU,IAAF,CAAOgO,WAAP,CAAP,EAA4B,UAAU/N,GAAV,EAAe;AACzC,QAAI8L,QAAQiC,YAAY/N,GAAZ,CAAZ;AACA,QAAIP,mBAAmBA,gBAAgBuO,QAAhB,CAAyBlC,KAAzB,CAAvB,EACEA,QAAQrM,gBAAgB4K,IAAhB,CAAqB5K,gBAAgBwO,IAAhB,CAAqBnC,KAArB,CAArB,EAAkDnN,MAAlD,CAAR;AACFoP,gBAAY/N,GAAZ,IAAmB8L,KAAnB;AACD,GALD;AAMD;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApO,OAAO+D,OAAP,CAAe,YAAY;AACzB,MAAI,CAAE0I,sBAAN,EAA8B;AAC5B;AACD;;AAED,MAAIzI,uBACFlC,QAAQ,uBAAR,EAAiCkC,oBADnC;;AAGAA,uBAAqBE,cAArB,CAAoC0H,IAApC,CAAyC;AACvC4E,UAAM,CAAC;AACL9D,cAAQ,EAAE+D,SAAS,IAAX;AADH,KAAD,EAEH;AACD,0BAAoB,EAAEA,SAAS,KAAX;AADnB,KAFG;AADiC,GAAzC,EAMGC,OANH,CAMW,UAAUrP,MAAV,EAAkB;AAC3B2C,yBAAqBE,cAArB,CAAoC8F,MAApC,CAA2C3I,OAAO6L,GAAlD,EAAuD;AACrD/B,YAAM;AACJuB,gBAAQ3K,gBAAgB4K,IAAhB,CAAqBtL,OAAOqL,MAA5B;AADJ;AAD+C,KAAvD;AAKD,GAZD;AAaD,CArBD;;AAuBA;AACA;AACA,SAASiE,qBAAT,CAA+BvQ,OAA/B,EAAwCe,IAAxC,EAA8C;AAC5C,MAAIf,QAAQ+M,OAAZ,EACEhM,KAAKgM,OAAL,GAAe/M,QAAQ+M,OAAvB;AACF,SAAOhM,IAAP;AACD;;AAED;AACAwC,GAAGiN,aAAH,GAAmB,UAAUxQ,OAAV,EAAmBe,IAAnB,EAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAOQ,EAAE0H,MAAF,CAAS;AACdwH,eAAW,IAAIxN,IAAJ,EADG;AAEd6J,SAAKsC,OAAO1G,EAAP;AAFS,GAAT,EAGJ3H,IAHI,CAAP;;AAKA,MAAIA,KAAK4J,QAAT,EAAmB;AACjBpJ,MAAES,IAAF,CAAOjB,KAAK4J,QAAZ,EAAsB,UAAUsF,WAAV,EAAuB;AAC3CD,+BAAyBC,WAAzB,EAAsClP,KAAK+L,GAA3C;AACD,KAFD;AAGD;;AAED,MAAI4D,QAAJ;AACA,MAAI,KAAK3J,iBAAT,EAA4B;AAC1B2J,eAAW,KAAK3J,iBAAL,CAAuB/G,OAAvB,EAAgCe,IAAhC,CAAX;;AAEA;AACA;AACA;AACA,QAAI2P,aAAa,mBAAjB,EACEA,WAAWH,sBAAsBvQ,OAAtB,EAA+Be,IAA/B,CAAX;AACH,GARD,MAQO;AACL2P,eAAWH,sBAAsBvQ,OAAtB,EAA+Be,IAA/B,CAAX;AACD;;AAEDQ,IAAES,IAAF,CAAO,KAAKmE,qBAAZ,EAAmC,UAAUwK,IAAV,EAAgB;AACjD,QAAI,CAAEA,KAAKD,QAAL,CAAN,EACE,MAAM,IAAI9Q,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,wBAAtB,CAAN;AACH,GAHD;;AAKA,MAAID,MAAJ;AACA,MAAI;AACFA,aAAS,KAAKf,KAAL,CAAW0M,MAAX,CAAkBkE,QAAlB,CAAT;AACD,GAFD,CAEE,OAAOlJ,CAAP,EAAU;AACV;AACA;AACA,QAAIA,EAAEnD,IAAF,KAAW,YAAf,EAA6B,MAAMmD,CAAN;AAC7B,QAAIA,EAAEoJ,IAAF,KAAW,KAAf,EAAsB,MAAMpJ,CAAN;AACtB,QAAIA,EAAEqJ,GAAF,CAAMC,OAAN,CAAc,gBAAd,MAAoC,CAAC,CAAzC,EACE,MAAM,IAAIlR,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,uBAAtB,CAAN;AACF,QAAI0G,EAAEqJ,GAAF,CAAMC,OAAN,CAAc,UAAd,MAA8B,CAAC,CAAnC,EACE,MAAM,IAAIlR,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,0BAAtB,CAAN;AACF;AACA,UAAM0G,CAAN;AACD;AACD,SAAO3G,MAAP;AACD,CA1DD;;AA4DA;AACA;AACA0C,GAAGwN,gBAAH,GAAsB,UAAUC,KAAV,EAAiB;AACrC,MAAIC,SAAS,KAAKhR,QAAL,CAAciR,6BAA3B;AACA,SAAO,CAACD,MAAD,IACJ1P,EAAE4P,UAAF,CAAaF,MAAb,KAAwBA,OAAOD,KAAP,CADpB,IAEJzP,EAAE6P,QAAF,CAAWH,MAAX,KACE,IAAII,MAAJ,CAAW,MAAMzR,OAAO0R,aAAP,CAAqBL,MAArB,CAAN,GAAqC,GAAhD,EAAqD,GAArD,CAAD,CAA4DM,IAA5D,CAAiEP,KAAjE,CAHJ;AAID,CAND;;AAQA;AACA,SAAS5K,0BAAT,CAAoCrF,IAApC,EAA0C;AACxC,MAAIG,OAAO,IAAX;AACA,MAAI+P,SAAS/P,KAAKjB,QAAL,CAAciR,6BAA3B;AACA,MAAI,CAACD,MAAL,EACE,OAAO,IAAP;;AAEF,MAAIO,cAAc,KAAlB;AACA,MAAI,CAACjQ,EAAEkQ,OAAF,CAAU1Q,KAAKkM,MAAf,CAAL,EAA6B;AAC3BuE,kBAAcjQ,EAAEmQ,GAAF,CAAM3Q,KAAKkM,MAAX,EAAmB,UAAU+D,KAAV,EAAiB;AAChD,aAAO9P,KAAK6P,gBAAL,CAAsBC,MAAMW,OAA5B,CAAP;AACD,KAFa,CAAd;AAGD,GAJD,MAIO,IAAI,CAACpQ,EAAEkQ,OAAF,CAAU1Q,KAAK4J,QAAf,CAAL,EAA+B;AACpC;AACA6G,kBAAcjQ,EAAEmQ,GAAF,CAAM3Q,KAAK4J,QAAX,EAAqB,UAAUsB,OAAV,EAAmB;AACpD,aAAOA,QAAQ+E,KAAR,IAAiB9P,KAAK6P,gBAAL,CAAsB9E,QAAQ+E,KAA9B,CAAxB;AACD,KAFa,CAAd;AAGD;;AAED,MAAIQ,WAAJ,EACE,OAAO,IAAP;;AAEF,MAAIjQ,EAAE6P,QAAF,CAAWH,MAAX,CAAJ,EACE,MAAM,IAAIrR,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,MAAMmQ,MAAN,GAAe,iBAArC,CAAN,CADF,KAGE,MAAM,IAAIrR,OAAOkB,KAAX,CAAiB,GAAjB,EAAsB,mCAAtB,CAAN;AACH;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyC,GAAGqO,qCAAH,GAA2C,UACzCC,WADyC,EAEzC5B,WAFyC,EAGzCjQ,OAHyC,EAIzC;AACAA,YAAUuB,EAAE6F,KAAF,CAAQpH,WAAW,EAAnB,CAAV;;AAEA,MAAI6R,gBAAgB,UAAhB,IAA8BA,gBAAgB,QAAlD,EACE,MAAM,IAAI/Q,KAAJ,CACJ,2EACI+Q,WAFA,CAAN;AAGF,MAAI,CAACtQ,EAAEC,GAAF,CAAMyO,WAAN,EAAmB,IAAnB,CAAL,EACE,MAAM,IAAInP,KAAJ,CACJ,8BAA8B+Q,WAA9B,GAA4C,kBADxC,CAAN;;AAGF;AACA,MAAItE,WAAW,EAAf;AACA,MAAIuE,eAAe,cAAcD,WAAd,GAA4B,KAA/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,gBAAgB,SAAhB,IAA6B,CAACE,MAAM9B,YAAYvH,EAAlB,CAAlC,EAAyD;AACvD6E,aAAS,KAAT,IAAkB,CAAC,EAAD,EAAI,EAAJ,CAAlB;AACAA,aAAS,KAAT,EAAgB,CAAhB,EAAmBuE,YAAnB,IAAmC7B,YAAYvH,EAA/C;AACA6E,aAAS,KAAT,EAAgB,CAAhB,EAAmBuE,YAAnB,IAAmCE,SAAS/B,YAAYvH,EAArB,EAAyB,EAAzB,CAAnC;AACD,GAJD,MAIO;AACL6E,aAASuE,YAAT,IAAyB7B,YAAYvH,EAArC;AACD;;AAED,MAAI3H,OAAO,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBuM,QAAnB,CAAX;;AAEA,MAAIxM,IAAJ,EAAU;AACRiP,6BAAyBC,WAAzB,EAAsClP,KAAK+L,GAA3C;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAImF,WAAW,EAAf;AACA1Q,MAAES,IAAF,CAAOiO,WAAP,EAAoB,UAAUjC,KAAV,EAAiB9L,GAAjB,EAAsB;AACxC+P,eAAS,cAAcJ,WAAd,GAA4B,GAA5B,GAAkC3P,GAA3C,IAAkD8L,KAAlD;AACD,KAFD;;AAIA;AACA;AACA,SAAKlO,KAAL,CAAW8J,MAAX,CAAkB7I,KAAK+L,GAAvB,EAA4B;AAC1B/B,YAAMkH;AADoB,KAA5B;;AAIA,WAAO;AACLlN,YAAM8M,WADD;AAELhR,cAAQE,KAAK+L;AAFR,KAAP;AAKD,GAxBD,MAwBO;AACL;AACA;AACA/L,WAAO,EAAC4J,UAAU,EAAX,EAAP;AACA5J,SAAK4J,QAAL,CAAckH,WAAd,IAA6B5B,WAA7B;AACA,WAAO;AACLlL,YAAM8M,WADD;AAELhR,cAAQ,KAAK2P,aAAL,CAAmBxQ,OAAnB,EAA4Be,IAA5B;AAFH,KAAP;AAID;AACF,CAtED;;AAwEA,SAASgF,oBAAT,CAA8BjG,KAA9B,EAAqC;AACnC;AACA;AACA;AACAA,QAAMoS,KAAN,CAAY;AACV;AACA;AACAtI;AAAQ,sBAAU/I,MAAV,EAAkBE,IAAlB,EAAwB0J,MAAxB,EAAgC0H,QAAhC,EAA0C;AAChD;AACA,YAAIpR,KAAK+L,GAAL,KAAajM,MAAjB,EACE,OAAO,KAAP;;AAEF;AACA;AACA;AACA,YAAI4J,OAAOjB,MAAP,KAAkB,CAAlB,IAAuBiB,OAAO,CAAP,MAAc,SAAzC,EACE,OAAO,KAAP;;AAEF,eAAO,IAAP;AACD;;AAZD;AAAA,OAHU;AAgBV2H,WAAO,CAAC,KAAD,CAhBG,CAgBK;AAhBL,GAAZ;;AAmBA;AACAtS,QAAMuS,YAAN,CAAmB,UAAnB,EAA+B,EAACC,QAAQ,CAAT,EAAYC,QAAQ,CAApB,EAA/B;AACAzS,QAAMuS,YAAN,CAAmB,gBAAnB,EAAqC,EAACC,QAAQ,CAAT,EAAYC,QAAQ,CAApB,EAArC;AACAzS,QAAMuS,YAAN,CAAmB,yCAAnB,EACmB,EAACC,QAAQ,CAAT,EAAYC,QAAQ,CAApB,EADnB;AAEAzS,QAAMuS,YAAN,CAAmB,mCAAnB,EACmB,EAACC,QAAQ,CAAT,EAAYC,QAAQ,CAApB,EADnB;AAEA;AACA;AACAzS,QAAMuS,YAAN,CAAmB,yCAAnB,EACmB,EAAEE,QAAQ,CAAV,EADnB;AAEA;AACAzS,QAAMuS,YAAN,CAAmB,kCAAnB,EAAuD,EAAEE,QAAQ,CAAV,EAAvD;AACD;;AAED;AACA;AACA;;AAEAhP,GAAG4H,yBAAH,GAA+B,UAAUtK,MAAV,EAAkB2R,cAAlB,EAAkC;AAC/D,MAAIA,cAAJ,EAAoB;AAClB,SAAK1S,KAAL,CAAW8J,MAAX,CAAkB/I,MAAlB,EAA0B;AACxB4R,cAAQ;AACN,mDAA2C,CADrC;AAEN,+CAAuC;AAFjC,OADgB;AAKxBC,gBAAU;AACR,uCAA+BF;AADvB;AALc,KAA1B;AASD;AACF,CAZD;;AAcAjP,GAAG+C,sCAAH,GAA4C,YAAY;AACtD,MAAIpF,OAAO,IAAX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAtB,SAAO+D,OAAP,CAAe,YAAY;AACzBzC,SAAKpB,KAAL,CAAW0L,IAAX,CAAgB;AACd,iDAA2C;AAD7B,KAAhB,EAEG;AACD,6CAAuC;AADtC,KAFH,EAIG8E,OAJH,CAIW,UAAUvP,IAAV,EAAgB;AACzBG,WAAKiK,yBAAL,CACEpK,KAAK+L,GADP,EAEE/L,KAAK4J,QAAL,CAAcC,MAAd,CAAqB+H,mBAFvB;AAID,KATD;AAUD,GAXD;AAYD,CArBD,yH;;;;;;;;;;;ACt6CA,SAAQjT,cAAR,QAA6B,sBAA7B;;AAEA;;AAEAA,eAAe8D,SAAf,CAAyBoP,IAAzB,GAAgC;AAC9BC;AAAe,2BAAUrK,KAAV,EAAiB;AAC9B,aAAO5I,OAAOkT,WAAP,CAAmB,sBAAsBtK,KAAzC,CAAP;AACD;;AAFD;AAAA,KAD8B;;AAK9BuK;AAAa,yBAAUvK,KAAV,EAAiB;AAC5B,aAAO5I,OAAOkT,WAAP,CAAmB,oBAAoBtK,KAAvC,CAAP;AACD;;AAFD;AAAA,KAL8B;;AAS9BwK;AAAe,2BAAUxK,KAAV,EAAiB;AAC9B,aAAO5I,OAAOkT,WAAP,CAAmB,sBAAsBtK,KAAzC,CAAP;AACD;;AAFD;AAAA;AAT8B,CAAhC,sH","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsServer} from \"./accounts_server.js\";\nimport \"./accounts_rate_limit.js\";\nimport \"./url_server.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the server version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsServer\n};\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsCommon} from \"./accounts_common.js\";\n\nvar Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId;\n// Removes default rate limiting rule\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n};\n\n// Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword',\n          'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n","var crypto = Npm.require('crypto');\n\nimport {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method. In theory, it\n    // could also be called from publish statements, since they also\n    // have a userId associated with them. However, given that publish\n    // functions aren't reactive, using any of the infomation from\n    // Meteor.user() in a publish function will always use the value\n    // from when the function first runs. This is likely not what the\n    // user expects. The way to make this work in a publish is to do\n    // Meteor.find(this.userId).observe and recompute when the user\n    // record changes.\n    var currentInvocation = DDP._CurrentInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls. Use this.userId in publish functions.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n};\n\nvar Ap = AccountsServer.prototype;\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    }\n    catch (e) {\n      attempt.allowed = false;\n      // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n      attempt.error = e;\n      return true;\n    }\n    if (! ret) {\n      attempt.allowed = false;\n      // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n      if (!attempt.error)\n        attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n    return true;\n  });\n};\n\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\n\n///\n/// LOGIN METHODS\n///\n\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n\n\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\nvar tryLoginMethod = function (type, fn) {\n  var result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\n\n// Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (! stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n    self._insertLoginToken(userId, stampedLoginToken);\n  }\n\n  // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(\n      userId,\n      methodInvocation.connection,\n      self._hashLoginToken(stampedLoginToken.token)\n    );\n  });\n\n  methodInvocation.setUserId(userId);\n\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n};\n\n\n// After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\nAp._attemptLogin = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  if (!result)\n    throw new Error(\"result is required\");\n\n  // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n  if (!result.userId && !result.error)\n    throw new Error(\"A login method must specify a userId or an error\");\n\n  var user;\n  if (result.userId)\n    user = this.users.findOne(result.userId);\n\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !! (result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error)\n    attempt.error = result.error;\n  if (user)\n    attempt.user = user;\n\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(\n      this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      ),\n      result.options || {}\n    );\n    this._successfulLogin(methodInvocation.connection, attempt);\n    return ret;\n  }\n  else {\n    this._failedLogin(methodInvocation.connection, attempt);\n    throw attempt.error;\n  }\n};\n\n\n// All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\nAp._loginMethod = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  type,\n  fn\n) {\n  return this._attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    tryLoginMethod(type, fn)\n  );\n};\n\n\n// Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\nAp._reportLoginFailure = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n  this._failedLogin(methodInvocation.connection, attempt);\n\n  // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n  return attempt;\n};\n\n\n///\n/// LOGIN HANDLERS\n///\n\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\nAp.registerLoginHandler = function (name, handler) {\n  if (! handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n};\n\n\n// Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n\n    var result = tryLoginMethod(\n      handler.name,\n      function () {\n        return handler.handler.call(methodInvocation, options);\n      }\n    );\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n};\n\n// Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { hashedToken: loginToken },\n          { token: loginToken }\n        ]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this;\n\n  // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n  var methods = {};\n\n  // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n  methods.login = function (options) {\n    var self = this;\n\n    // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n    accounts._setLoginToken(this.userId, this.connection, null);\n    if (token && this.userId)\n      accounts.destroyToken(this.userId, token);\n    this.setUserId(null);\n  };\n\n  // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n      var newToken = accounts._generateStampedLoginToken();\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 :\n                        CONNECTION_CLOSE_DELAY_MS);\n      // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  };\n\n  // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: { \"services.resume.loginTokens\": 1 }\n    });\n    if (! self.userId || ! user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n    var currentStampedToken = _.find(\n      user.services.resume.loginTokens,\n      function (stampedToken) {\n        return stampedToken.hashedToken === currentHashedToken;\n      }\n    );\n    if (! currentStampedToken) { // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n    var newStampedToken = accounts._generateStampedLoginToken();\n    newStampedToken.when = currentStampedToken.when;\n    accounts._insertLoginToken(self.userId, newStampedToken);\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  };\n\n  // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n  methods.removeOtherTokens = function () {\n    var self = this;\n    if (! self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    var currentToken = accounts._getLoginToken(self.connection.id);\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n      }\n    });\n  };\n\n  // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({service: String}));\n    // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n    if (!(accounts.oauth\n          && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({service: options.service}))\n      throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n\n    if (_.has(options, \"secret\") && usingOAuthEncryption())\n      options.secret = OAuthEncryption.seal(options.secret);\n\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this;\n\n  // Publish all login service configuration fields other than secret.\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n  }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n  // Publish the current user's record to the client.\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  }, /*suppress autopublish warning*/{is_auto: true});\n\n  // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    }, /*suppress autopublish warning*/{is_auto: true});\n\n    // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: { $ne: this.userId }\n      } : {};\n\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    }, /*suppress autopublish warning*/{is_auto: true});\n  });\n};\n\n// Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(\n    this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n  this._autopublishFields.otherUsers.push.apply(\n    this._autopublishFields.otherUsers, opts.forOtherUsers);\n};\n\n///\n/// ACCOUNT DATA\n///\n\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId];\n\n  // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n  if (!data)\n    return;\n\n  if (value === undefined)\n    delete data[field];\n  else\n    data[field] = value;\n};\n\n\n///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n};\n\n\n// {token, when} => {hashedToken, when}\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n};\n\n\n// Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n};\n\n\n// Exported for tests.\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(\n    userId,\n    this._hashStampedToken(stampedToken),\n    query\n  );\n};\n\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n};\n\n// test hook\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n};\n\n// Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n};\n\n// newToken is a hashed token.\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser;\n      // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, { fields: { _id: 1 } }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close();\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      });\n\n      // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (! foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}\n\n// Login handler for resume tokens.\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  var user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    });\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  var oldUnhashedStyleToken;\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n}\n\n// (Also used by Meteor Accounts server and tests).\n//\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date\n  };\n};\n\n///\n/// TOKEN EXPIRATION\n///\n\n// Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n  var userFilter = userId ? {_id: userId} : {};\n\n\n  // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n  this.users.update(_.extend(userFilter, {\n    $or: [\n      { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n      { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n    ]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { when: { $lt: oldestValidDate } },\n          { when: { $lt: +oldestValidDate } }\n        ]\n      }\n    }\n  }, { multi: true });\n  // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n};\n\n// @override from accounts_common.js\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n  // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n  if (_.has(this._options, \"loginExpirationInDays\") &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}\n\n\n///\n/// OAuth Encryption Support\n///\n\nvar OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}\n\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(function () {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n}\n\n// Called by accounts-password\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user);\n\n    // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n    if (fullUser === 'TEST DEFAULT HOOK')\n      fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (! hook(fullUser))\n      throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.err.indexOf('emails.address') !== -1)\n      throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.err.indexOf('username') !== -1)\n      throw new Meteor.Error(403, \"Username already exists.\");\n    // XXX better error reporting for services.facebook.id duplicate, etc\n    throw e;\n  }\n  return userId;\n};\n\n// Helper function: returns false if email does not match company domain from\n// the configuration.\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain ||\n    (_.isFunction(domain) && domain(email)) ||\n    (_.isString(domain) &&\n      (new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i')).test(email));\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain)\n    return true;\n\n  var emailIsGood = false;\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood)\n    return true;\n\n  if (_.isString(domain))\n    throw new Meteor.Error(403, \"@\" + domain + \" email required\");\n  else\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}\n\n///\n/// MANAGING USER OBJECTS\n///\n\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\nAp.updateOrCreateUserFromExternalService = function (\n  serviceName,\n  serviceData,\n  options\n) {\n  options = _.clone(options || {});\n\n  if (serviceName === \"password\" || serviceName === \"resume\")\n    throw new Error(\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n  if (!_.has(serviceData, 'id'))\n    throw new Error(\n      \"Service data for service \" + serviceName + \" must include id\");\n\n  // Look for a user with the appropriate service user id.\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\";\n\n  // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{},{}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector);\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n\n    // We *don't* process options (eg, profile) for update, but we do replace\n    // the serviceData (eg, so that we keep an unexpired access token and\n    // don't cache old email addresses in serviceData.email).\n    // XXX provide an onUpdateUser hook which would let apps update\n    //     the profile too\n    var setAttrs = {};\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    });\n\n    // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n\n  } else {\n    // Create a new user with the service data. Pass other options through to\n    // insertUserDoc.\n    user = {services: {}};\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(options, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId)\n        return false;\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile')\n        return false;\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', {unique: 1, sparse: 1});\n  users._ensureIndex('emails.address', {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n                     {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.token',\n                     {unique: 1, sparse: 1});\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n                     { sparse: 1 });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });\n}\n\n///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this;\n\n  // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(\n        user._id,\n        user.services.resume.loginTokensToDelete\n      );\n    });\n  });\n};\n","import {AccountsServer} from \"./accounts_server.js\";\n\n// XXX These should probably not actually be public?\n\nAccountsServer.prototype.urls = {\n  resetPassword: function (token) {\n    return Meteor.absoluteUrl('#/reset-password/' + token);\n  },\n\n  verifyEmail: function (token) {\n    return Meteor.absoluteUrl('#/verify-email/' + token);\n  },\n\n  enrollAccount: function (token) {\n    return Meteor.absoluteUrl('#/enroll-account/' + token);\n  }\n};\n"]}